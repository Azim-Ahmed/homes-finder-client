{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext, useEffect, useState } from 'react';\nimport { Col, Row, Table, Button } from 'react-bootstrap';\nimport Layout from '../../Components/Layout';\nimport { UserContext } from '../_app';\nimport Modal from '../../Components/ReUseableUI/Modal';\nimport Input from '../../Components/ReUseableUI/Input';\nimport { api } from '../../urlConfig';\nimport styles from '../../styles/dashboard.module.css';\nimport Loader from '../../Components/Loader';\n\nconst Service = props => {\n  const {\n    appData,\n    setAppData\n  } = useContext(UserContext); //states of addServices\n\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: time,\n    1: setTime\n  } = useState('');\n  const {\n    0: price,\n    1: setPrice\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: servicePicture,\n    1: setServicePicture\n  } = useState(''); //states of the this component\n\n  const {\n    0: getAllServices,\n    1: setGetAllservices\n  } = useState({});\n  const {\n    0: serviceDetailModal,\n    1: setServiceDetailModal\n  } = useState(false);\n  const {\n    0: serviceDetails,\n    1: setServiceDetails\n  } = useState(null);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false); //update service state\n\n  const {\n    0: updatedServiceModal,\n    1: setUpdatedServiceModal\n  } = useState(false);\n  const {\n    0: updatedData,\n    1: setUpdatedData\n  } = useState({}); //\n\n  useEffect(() => {\n    fetch(`${api}/services/getAllServices`).then(res => res.json()).then(data => setGetAllservices(data.service));\n  }, [getAllServices]);\n\n  const handleShow = () => setShow(true); //show particular service details\n\n\n  const showServiceDetailsModal = service => {\n    setServiceDetails(service);\n    setServiceDetailModal(true);\n  };\n\n  const handleAddService = () => {\n    const formData = {\n      name,\n      time,\n      price,\n      description,\n      servicePicture\n    };\n    console.log(formData);\n    fetch(`${api}/service/create`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    }).then(res => res.json()).then(result => {\n      alert('One Service Item Added');\n    });\n    setShow(false);\n  };\n\n  const renderAllServicesData = () => {\n    if (!getAllServices.length) {\n      return /*#__PURE__*/_jsx(Loader, {});\n    }\n\n    return /*#__PURE__*/_jsxs(Table, {\n      responsive: true,\n      style: {\n        fontSize: '.9rem'\n      },\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsx(\"thead\", {\n        children: /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"th\", {\n            children: \"#\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Name\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Price\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Quantity\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Shoow Details\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"update\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"delete\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"tbody\", {\n        children: getAllServices.length > 0 ? getAllServices.map((service, index) => /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"td\", {\n            children: index + 1\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: service.name\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: service.description\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: service.price\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: /*#__PURE__*/_jsxs(Button, {\n              onClick: () => showServiceDetailsModal(service),\n              variant: \"dark\",\n              children: [' ', \"Show Deatils\"]\n            })\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: /*#__PURE__*/_jsxs(Button, {\n              onClick: () => updateServiceModal(service),\n              variant: \"warning\",\n              children: [' ', \"Update\"]\n            })\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: /*#__PURE__*/_jsxs(Button, {\n              onClick: () => deleteService(service),\n              variant: \"danger\",\n              children: [' ', \"Delete\"]\n            })\n          })]\n        }, service._id)) : null\n      })]\n    });\n  }; //add service Modal\n\n\n  const renderAddServiceModal = () => {\n    return /*#__PURE__*/_jsxs(Modal, {\n      size: \"lg\",\n      show: show,\n      addServiceButton: true,\n      onClick: handleAddService,\n      handleClose: () => setShow(false),\n      modalTitle: \"Add New Service\",\n      children: [/*#__PURE__*/_jsx(Input, {\n        label: \"Name\",\n        value: name,\n        placeholder: `Service Name`,\n        onChange: e => setName(e.target.value)\n      }), /*#__PURE__*/_jsx(Input, {\n        label: \"Price\",\n        value: price,\n        placeholder: `Price`,\n        onChange: e => setPrice(e.target.value)\n      }), /*#__PURE__*/_jsx(Input, {\n        label: \"Time\",\n        value: time,\n        placeholder: `time`,\n        onChange: e => setTime(e.target.value)\n      }), /*#__PURE__*/_jsx(Input, {\n        label: \"Description\",\n        value: description,\n        placeholder: `Description`,\n        onChange: e => setDescription(e.target.value)\n      }), /*#__PURE__*/_jsx(Input, {\n        label: \"servicePicture URL\",\n        value: servicePicture,\n        placeholder: `servicePicture URL`,\n        onChange: e => setServicePicture(e.target.value)\n      })]\n    });\n  }; //service Details\n\n\n  const renderServiceDetailModal = () => {\n    if (!serviceDetails) {\n      return null && /*#__PURE__*/_jsx(Loader, {});\n    }\n\n    return /*#__PURE__*/_jsxs(Modal, {\n      size: \"lg\",\n      show: serviceDetailModal,\n      showServiceDetailsModal: false,\n      handleClose: () => setServiceDetailModal(false),\n      modalTitle: `Service Details`,\n      children: [/*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsxs(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"bg-secondary text-white p-2 key\",\n            children: \"Name\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: \"value\",\n            children: serviceDetails.name\n          })]\n        }), /*#__PURE__*/_jsxs(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"bg-secondary text-white p-2 key\",\n            children: \"Price\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: \"value\",\n            children: serviceDetails.price\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsxs(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"bg-secondary text-white p-2 key\",\n            children: \"Updated time\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: \"value\",\n            children: serviceDetails.updatedAt\n          })]\n        }), /*#__PURE__*/_jsxs(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"bg-secondary text-white p-2 key\",\n            children: \"Created Time\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: \"value\",\n            children: serviceDetails.createdAt\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Row, {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxs(Col, {\n          md: \"12\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"bg-secondary text-white p-2 key\",\n            children: \"Description\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: \"value\",\n            children: serviceDetails.description\n          })]\n        }), /*#__PURE__*/_jsxs(Col, {\n          md: \"12\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"bg-secondary text-white p-2 key\",\n            children: \"Service Picture\"\n          }), /*#__PURE__*/_jsx(\"img\", {\n            className: `value img-fluid ${styles.detailsImage}`,\n            src: serviceDetails.servicePicture\n          })]\n        })]\n      })]\n    });\n  }; //update service section\n\n\n  const updateServiceModal = service => {\n    setServiceDetails(service);\n    setUpdatedServiceModal(true);\n  };\n\n  const handleServiceInput = e => {\n    setUpdatedData(_objectSpread(_objectSpread({}, updatedData), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const updateServiceForm = () => {\n    if (updatedData) {\n      fetch(`${api}/service/update/${serviceDetails._id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      }).then(res => res.json()).then(data => {\n        alert('Updated');\n      });\n      setUpdatedServiceModal(false);\n    } else {\n      fetch(`${api}/service/update/${serviceDetails._id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(serviceDetails)\n      }).then(res => res.json()).then(data => {\n        alert('Updated');\n      });\n      setUpdatedServiceModal(false);\n    }\n  }; //update service modal\n\n\n  const renderUpdateServicesModal = () => {\n    if (!serviceDetails) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxs(Modal, {\n      show: updatedServiceModal,\n      modalTitle: `Update Service` // handleClose={updateServiceForm}\n      ,\n      onClick: updateServiceForm,\n      handleClose: () => setUpdatedServiceModal(false),\n      size: \"lg\",\n      update: true,\n      children: [/*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsxs(Col, {\n          md: 6,\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"key\",\n            children: \"Name\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"name\",\n            defaultValue: serviceDetails.name,\n            placeholder: `Service Name`,\n            onChange: handleServiceInput\n          })]\n        }), /*#__PURE__*/_jsxs(Col, {\n          md: 6,\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"key\",\n            children: \"Price\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"price\",\n            defaultValue: serviceDetails.price,\n            placeholder: `Price`,\n            onChange: handleServiceInput\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsxs(Col, {\n          md: 6,\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"key\",\n            children: \"Description\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"description\",\n            defaultValue: serviceDetails.description,\n            placeholder: `Description`,\n            onChange: handleServiceInput\n          })]\n        }), /*#__PURE__*/_jsxs(Col, {\n          md: 6,\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"key\",\n            children: \"Time\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"time\",\n            defaultValue: serviceDetails.time,\n            placeholder: `Time`,\n            onChange: handleServiceInput\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsxs(Col, {\n          md: 12,\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            className: \"key\",\n            children: \"servicePicture\"\n          }), /*#__PURE__*/_jsx(Input, {\n            name: \"servicePicture\",\n            defaultValue: serviceDetails.servicePicture,\n            placeholder: `servicePicture`,\n            onChange: handleServiceInput\n          })]\n        })\n      })]\n    });\n  };\n\n  const deleteService = service => {\n    fetch(`${api}/service/delete/${service._id}`, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(result => {\n      alert('deleted');\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Layout, {\n    dashboard: true,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"d-flex justify-content-between my-3\",\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        className: \"text-white\",\n        children: \"Service\"\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"primary\",\n        onClick: handleShow,\n        children: \"Add Service\"\n      }), ' ']\n    }), renderAllServicesData(), renderAddServiceModal(), renderServiceDetailModal(), renderUpdateServicesModal()]\n  });\n};\n\nexport default Service;","map":null,"metadata":{},"sourceType":"module"}